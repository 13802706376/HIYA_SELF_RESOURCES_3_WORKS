查找id等于name的元素：   
var nameTag = $("#name");   
  
查找id等于name的标签的值：   
var name = $("#name").val();   
  
查找所有div元素：    
var divTag = $("div");   
  
查找所有样式类是 "myClass" 的元素     
var myClassTag = $(".myClass");   
  
找到每一个元素   
var allTag = $("*");   
  
找到表单中所有的 input 元素   
var inputTag = $("form input");   
  
获取匹配的第一个元素和最后一个元素   
var firstTag = $("li").first();   
var lastTag = $("li").last();   
  
查找所有未选中的 input 元素   
var notCheckedTag = $("input:not(:checked)");   
  
查找表格的1、3、5...行（奇数行）   
var oddTrTag = $("tr:even");   
  
查找表格的2、4、6...行（偶数行）   
var evenTrTag = $("tr:odd");   
  
查找表格第二行   
var tempTag = $("tr:eq(1)");   
  
查找大于第三的div元素   
var tempTag = $("div:gt(2)");   
  
查找小于第三行的行   
var tempTag = $("tr:lt(2)");   
  
查找所有包含"Wade"的div元素   
var tempTag = $("div:contains('Wade')");   
  
给所有 div 元素添加一个 text 类   
$("div").addClass("text");   
  
查找隐藏的tr/找出type为隐藏域的标签   
var tempTag = $("tr:hidden");   
var tempTag = $("input:hidden");  

查找可见的tr   
var tempTag = $("tr:visible");   
  
查找所有含有id属性的div元素   
var tempTag = $("div[id]");   
  
给样式为sub_title_ico的标签下的strong标签赋值   
$(".sub_title_ico strong").val("555");   
  
给样式为sub_title_ico的标签下的b标签加html代码   
$(".sub_title_ico b").html("555");   
  
查找所有name属性不是wade的input元素默认为选中状态   
$("input[name!='Wade']").attr("checked","true");   
  
查找所有name以'news'开始的input元素   
var tempTag = $("input[name^='news']");   
  
查找所有name以 'news' 结尾的input元素   
var tempTag = $("input[name$=news]");   
  
查找所有name包含'news'的input元素   
var tempTag = $("input[name*=news]");   
  
查找所有name包含'news'且有属性id的input元素   
var tempTag = $("input[name*=news][id]");   
  
查找所有选中的选项元素   
var tempTag = $("select option:selected");   
  
返回文档中第一个图像的src属性值   
var temp = $("img").first().attr("src");   
  
为所有图像设置alt属性   
$("img").attr("alt","select");   
  
为所有图像设置src和alt属性   
$("img").attr({"src":"test.jpg","alt":"select"});   
  
将文档中第一个图像的src属性删除   
$("img").first().removeAttr("src");   
  
为匹配的元素加上 'selected' 类   
$("img[id]").addClass("selected");   
  
为匹配的元素删除 'selected' 类   
$("img[id]").removeClass("selected");  

取得第一个匹配元素的html内容   
var temp = $("#name").html();   
  
取得所有匹配元素的内容   
var temp = $("#name").text();   
  
设置所有匹配元素的文本内容   
$("#name").text("555");   
  
设置每一个匹配元素的值   
$("input").val("hello world!");   
  
要追加到目标中的内容   
$("p[id=name]").append("<b>Hello</b>");   
  
清空目标中的内容   
$("p[id=name]").html("");   
  
在所有段落之后插入一些HTML标记代码   
$("p").after("<b>Hello</b>");   
  
在所有段落之前插入一些HTML标记代码   
$("p").before("<b>Hello</b>");   
  
将所有匹配的元素替换成指定的HTML或DOM元素。   
$("p").replaceWith("<b>Paragraph. </b>");   
  
删除匹配的元素集合中所有的子节点。   
$("p").empty();   
  
从DOM中删除所有匹配的元素。   
$("p").remove();   
  
访问第一个匹配元素的样式属性   
$("p").css("color");   
  
在所有匹配的元素中，设置一个样式属性的值   
$("p").css("color","red");   
  
在所有匹配的元素中，设置多个样式属性的值   
$("p").css({color:"red",background:"blue"});   
$("p").css({color:"red","background-color":"blue"});   
  
取得第一个匹配元素当前计算的高度值/宽度值（px）   
$("p").height();   
$(window).width();   
$(document).height();   
  
设置第一个匹配元素高度值/宽度值（px）   
$("p").height(50);   
$(window).height(50);   
$(document).width(50);   
  
onload事件   
$(document).ready(function(){});   
$("#deptName").ready(function(){});   
$(function()   
{   
   // 文档就绪   
});  


绑定与取消绑定事件   
$(document).bind('click', function()    
{   
   alert(5556);   
});   
$("#deptName").unbind("click");   
blur, focus, focusin, focusout, load, resize, scroll, unload, click, dblclick, mousedown, mouseup,    
mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress,    
keyup, error    
  
绑定一次事件   
$(document).one('click', function()    
{   
    alert(5556);   
});   
  
鼠标悬停的表格加上特定的类   
$("td").hover(   
  function ()    
  {   
    $(this).addClass("hover");   
  },   
  function ()    
  {   
    $(this).removeClass("hover");   
  }   
);   
  
在每一个匹配元素的unload事件中绑定一个处理函数   
$(window).unload( function () { alert("Bye now!"); } );   
  
提交本页的第一个表单   
$("form:first").submit();   
  
在每一个匹配元素的submit事件中绑定的处理函数   
$("form").submit( function ()    
{   
  return false;   
});   
  
AJAX请求   
$.ajax   
({   
   type: "POST",   
   async: true,   
   url: "statistic.do?",   
   timeout:5000,   
   cache: false,   
   data: {"id":id, "commentPoint":commentPoint, "commentContents":commentContents},   
   beforeSend: function(XMLHttpRequest){}   
   //success: function(msg){}    
   success: processData   
});   
  
function processData(data)   
{   
  
}  


触发一些事件   
$("#deptName").click();   
$("#deptName").click(function (){$(this).hide();});   
$("#deptName").blur();   
$("#deptName").keydown();   
$("#deptName").keypress();   
$("#deptName").keyup();   
$("#deptName").load();   
  
去掉左右的空格   
var str = "  7788  877   ";   
str = $.trim(str);   
  
判断是否是数组   
var newArray = new Array();   
$.isArray(newArray);   
  
判断是否是方法   
$.isFunction("setColor");   
function setColor(){};   
  
查看对应元素的位置   
var arr = [ 4, "Pete", 8, "John" ];   
$.inArray("John", arr);  //3   
  
关于json和json数组   
normalArray   
[1,2,3,4,5]   
  
jsonObj   
{   
    "result":"success",   
    "errorCode":"12345"  
}   
  
jsonArray   
[   
    {   
        "id":"324",   
        "tag":"link1234",   
        "objecteID":"HW_076769",   
        "appNumber":"A17959558",   
        "countNum":"1",   
        "indexDB":"WWW_CN",   
        "errorCode":"",   
        "errorDescription":""  
    },   
        {   
        "id":"322",   
        "tag":"link123",   
        "objecteID":"HW_076769",   
        "appNumber":"A17959558",   
        "countNum":"1",   
        "indexDB":"WWW_CN",   
        "errorCode":"",   
        "errorDescription":""  
    }   
]  


import org.json.JSONObject;   
import org.json.JSONArray;   
JSONObject jsonObj = new JSONObject();   
jsonObj.put(1,'ONE');   
jsonObj.put(2,'TWO');   
  
JSONArray jsonArray = new JSONArray();   
jsonArray.put(jsonObj);   
  
$(normalArray).each(function (index)   
{   
    alert(index+"===="+this);   
});   
  
var result = jsonObj.result;   
alert("result==="+result);   
  
$(jsonArray).each(function (index)   
{   
    alert(index+"===="+this.appNumber);   
});   
  
  
  
var nbaWade = {};      
var nbaMcgrady = {};     
var nbaJames = {};   
nbaWade.setting =    
{   
    height:"193cm",   
    avoirdupois:"104.5",   
    club:"HEAT",   
    avgPoint:"28.5",   
    position:"Score guard",   
    inYear:"2003"  
}   
  
nbaWade.load = function (param)   
{   
    var height = nbaWade.setting.height;   
    var avgPoint = nbaWade.setting.avgPoint;   
    document.getElementById("hiddenSpan").innerHTML=avgPoint;   
    if(typeof param == 'function')   
    {   
        alert("function");   
    }   
    if(typeof param == 'number')   
    {   
        alert("number");   
    }   
    if(typeof param == 'string')   
    {   
        alert("string");   
    }   
}   
  
var nbaArray = [nbaWade,nbaMcgrady,nbaJames]; 

  
var isearch = {};   
isearch.isearch_vo={};   
isearch.isearch_vo.TagValuesParamsClientVO = function(callback,appNumber)   
{   
     this.callback = callback;   
     this.appNumber = appNumber;   
}   
  
isearch.isearch_client={};   
isearch.isearch_client.getQueryTagValue = function(searchParams)   
{   
       alert("searchParams.callback====="+searchParams.callback);   
       alert("searchParams.appNumber====="+searchParams.appNumber);   
       if(searchParams.callback!="")   
       {   
              
       }   
      return 6;   
}   
  
 var searchParams = new isearch.isearch_vo.TagValuesParamsClientVO();   
 searchParams.callback="processData";   
 searchParams.appNumber="A3579144";   
 var rrrr = isearch.isearch_client.getQueryTagValue(searchParams);   
alert("rrrr====="+rrrr);   
  
function processData(data)   
{   
     alert("data====="+data);   
}  

