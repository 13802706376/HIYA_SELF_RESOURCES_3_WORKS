一、概述
1  Spring是一个开源的控制反转(Inversion of Control ,IoC)和面向切面(AOP)的容器框架.它的主要目得是简化企业开发.核心内容包括7个模块
@ Core   框架的最基础部分，提供IoC和依赖注入特性。这里的基础概念是BeanFactory，它提供对Factory模式的经典实现来消除对程序性单例模式的需要，并真正地允许                 你从程序逻辑中分离出依赖关系和配置
@ Dao    提供了JDBC的抽象层，它可消除冗长的JDBC编码和解析数据库厂商特有的错误代码。 并且，JDBC 封装包还提供了一种比编程性更好的声明性事务管理方法
@ Orm    封装包提供了常用的“对象/关系”映射APIs的集成层。 其中包括JPA、JDO、Hibernate 和 iBatis 。利用ORM封装包，可以混合使用所有Spring提供的特性进行“对象/         关系”映射，如前边提到的简单声明性事务管理
@ Aop  
@ Web  
@ JAVA EE 

2  优点;
IOC容器降低组件之间的耦合度,实现软件各层之间的解耦。
可以使用容器提供的众多服务，如事务管理服务、消息服务等
容器提供了AOP技术，利用它很容易实现如权限拦截、运行期监控等功能。
Spring对于主流的应用框架提供了集成支持，如：集成Hibernate、JPA、Struts等，这样更便于应用的开发

3  一些JAR包
    (0) spring.jar是包含有完整发布的单个jar包，spring.jar中包含除了 spring-mock.jar里所包含的内容外其它所有jar包的内容，因为只有在开发环境下才会用到spring-        mock.jar来进行辅助测试，正式应用系统中是用不得这些类的。 
　　(1) spring-core.jar 

　　这个jar文件包含Spring框架基本的核心工具类，Spring其它组件要都要使用到这个包里的类，是其它组件的基本核心，当然你也可以在自己的应用系统中使用这些工具类。 

　　(2) spring-beans.jar 

　　这个jar文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。如果应用只需基本的IoC/DI支持，引入spring-core.jar及spring- beans.jar文件就可以了。 

　　(3) spring-aop.jar 

　　这个jar文件包含在应用中使用Spring的AOP特性时所需的类。使用基于AOP的Spring特性，如声明型事务管理（Declarative Transaction Management），也要在应用里包含这个jar包。 

　　(4) spring-context.jar 

　　这个jar文件为Spring核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI所需的全部类，UI方面的用来与模板（Templating）引擎如 Velocity、FreeMarker、JasperReports集成的类，以及校验Validation方面的相关类。 

　　(5) spring-dao.jar 

　　这个jar文件包含Spring DAO、Spring Transaction进行数据访问的所有类。为了使用声明型事务支持，还需在自己的应用里包含spring-aop.jar。 

　　(6) spring-hibernate.jar 

　　这个jar文件包含Spring对Hibernate 2及Hibernate 3进行封装的所有类。 

　　(7) spring-jdbc.jar 

　　这个jar文件包含对Spring对JDBC数据访问进行封装的所有类。 

　　(8) spring-orm.jar 

　　这个jar文件包含Spring对DAO特性集进行了扩展，使其支持 iBATIS、JDO、OJB、TopLink，因为Hibernate已经独立成包了，现在不包含在这个包里了。这个jar文件里大部分的类都要依赖 spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包。




四、IOC控制反转与依赖注入

1  我们都知道，在采用面向对象方法设计的软件系统中，它的底层实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑.
对象之间的耦合关系是无法避免的，也是必要的，这是协同工作的基础。现在，伴随着工业级应用的规模越来越庞大，对象之间的依赖关系也越来越
复杂，经常会出现对象之间的多重依赖性关系，因此，架构师和设计师对于系统的分析和设计，将面临更大的挑战。对象之间耦合度过高的系统，必
然会出现牵一发而动全身的情形。

2  耦合关系不仅会出现在对象与对象之间，也会出现在软件系统的各模块之间，以及软件系统和硬件系统之间。如何降低系统之间、模块之间和对象之间的耦合度，是软件工程永远追求的目标之一。为了解决对象之间的耦合度过高的问题，软件专家Michael Mattson提出了IOC理论，用来实现对象之间的“解耦”，目前这个理论已经被成功地应用到实践当中，很多的J2EE项目均采用了IOC框架产品Spring。

3  IOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”,软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。
软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。
通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。

4  控制被反转之后，获得依赖对象的过程由自身管理变为了由IOC容器主动注入。于是，他给“控制反转”取了一个更合适的名字叫做“依赖注入（Dependency Injection）”。他的这个答案，实际上给出了实现IOC的方法：注入。所谓依赖注入，就是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。
所以，依赖注入(DI)和控制反转(IOC)是从不同的角度的描述的同一件事情，就是指通过引入IOC容器，利用依赖关系注入的方式，实现对象之间的解耦。

5  对象A依赖于对象B,当对象 A需要用到对象B的时候，IOC容器就会立即创建一个对象B送给对象A。IOC容器就是一个对象制造工厂，你需要什么，它会给你送去，你直接使用就行了，而再也不用去关心你所用的东西是如何制成的，也不用关心最后是怎么被销毁的，这一切全部由IOC容器包办。

6  我们可以把IOC容器的工作模式看做是工厂模式的升华，可以把IOC容器看作是一个工厂，这个工厂里要生产的对象都在配置文件中给出定义，然后利用编程语言的的反射编程，根据配置文件中给出的类名生成相应的对象。从实现来看，IOC是把以前在工厂方法里写死的对象生成代码，改变为由配置文件来定义，也就是把工厂和对象生成这两者独立分隔开来，目的就是提高灵活性和可维护性。

7 配置文件配置依赖关系
	<!--action的配置 -->
	<bean name="/login" class="action.LoginAction">
		<property name="authorPs" ref="authorPs"></property>
	</bean>

	<bean name="/manBookInf" class="action.ManBookInfAction">
		<property name="bookPs" ref="bookPs"></property>
	</bean>

	<bean name="/manAuthorInf" class="action.ManAuthorInfAction">
		<property name="authorPs" ref="authorPs"></property>
	</bean>

	<!--service层的配置 -->
	<bean id="bookPs" class="ps.impl.BookPsImpl">
		<property name="bookAs" ref="bookAs"></property>
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<bean id="authorPs" class="ps.impl.AuthorPsImpl">
		<property name="authorAs" ref="authorAs"></property>
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!--dao层的配置 -->
	<bean id="bookAs" class="as.impl.BookAsImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<bean id="authorAs" class="as.impl.AuthorAsImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


8  IOC容器动态注入对象
	public AuthorPs authorPs;
	public void setAuthorPs(AuthorPs authorPs)
	{
		this.authorPs = authorPs;
	}


五、AOP

1  AOP(Aspect Oriented Programming)，也就是面向方面编程的技术。AOP基于IoC基础，是对OOP的有益补充。
   AOP将应用系统分为两部分，核心业务逻辑（Core business concerns）及横向的通用逻辑，也就是所谓的方面Crosscutting enterprise concerns，例如，所有大中型应用都要涉及到的持久化管理（Persistent）、事务管理（Transaction Management）、安全管理（Security）、日志管理（Logging）和调试管理（Debugging）等。

2 使用的原理：反射机制和代理模式
  有两种方式实现AOP编程：xml文件方式和annotation方式(使用AspectJ库实现的)


3 xml文件方式
需要添加三个包：spring-aop.jar , aspectjrt.jar ，aspectjweaver.jar，否则会报错。

package com.spring.aop;
public class Common 
{
  public void doBusiness(String username,String password)
  {
     System.out.println("------------------doBusiness----------------");
  }
}


package com.spring.aop;
public class Check 
{
 public void checkValidity()
 {
     System.out.println("------------------验证合法性----------------");
 }
public void addLog(JoinPoint j)
{
  System.out.println("------------------添加日志----------------");
  Object obj[] = j.getArgs();
  for(Object o :obj)
  {
     System.out.println(o);
  }
   System.out.println("========checkSecurity=="+j.getSignature().getName());//这个是获得方法名
 }
}

<?xml version="1.0" encoding="UTF-8"?>
<beans
 xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:aop="http://www.springframework.org/schema/aop"
 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

  <bean id="common" class="com.spring.aop.Common"/>
  <bean id="check" class="com.spring.aop.Check"/>
   
  <aop:config>
    <aop:aspect id="myAop" ref="check">
      <aop:pointcut id="target" expression="execution(* com.spring.aop.Common.execute(..))"/>
      <aop:before method="checkValidity" pointcut-ref="target"/>
      <aop:after method="addLog" pointcut-ref="target"/>
    </aop:aspect>
  </aop:config>
</beans>
注意：
execution(* com.spring.aop.*.*(..))"/
这样写应该就可以了
这是com.aptech.jb.epet.dao.hibimpl 包下所有的类的所有方法。。
第一个*代表所有的返回值类型
第二个*代表所有的类
第三个*代表类所有方法
最后一个..代表所有的参数。

package com.spring.aop;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class Client 
{
 public static void main(String[] args) 
 {
     BeanFactory factory=new ClassPathXmlApplicationContext("applicationContext-aop.xml");
     Common c=(Common) factory.getBean("common");
     c.execute("zhengjunhua","zhengjunhua");
   }
}

输出结果：
------------------doBusiness----------------
------------------普通类----------------
------------------添加日志----------------
zhengjunhua
zhengjunhua
========checkSecurity==execute


4 annotation方式
包：
* SPRING_HOME/dist/spring.jar
* SPRING_HOME/lib/jakarta-commons/commons-logging.jar
* SPRING_HOME/lib/log4j/log4j-1.2.14.jar
* SPRING_HOME/lib/aspectj/*.jar

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

//定义切面
@Aspect
public class CheckAspect 
{
//定义切入点，第一*表示返回值，..表示参数
@Pointcut("execution(* save*(..)) || execution(* del*(..))")
private void allSaveMethod(){};

//定义通知advice（before型），标识在哪个切入点(allSaveMethod),织入（weaver）此方法
@Before("allSaveMethod()")
public void checkUser()
{
   System.out.println("=======CheckAspect.checkUser()===========");
}
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd" 
           >
<!-- 启用aop -->
<aop:aspectj-autoproxy/>
<!--配置aspect-->
<bean id="checkAspect" class="com.CheckAspect" />
<bean id="userManager" class="com.manager.impl.UserManagerImpl" />
</beans>


public class UserManagerImpl implements IUserManager 
{
public void delUser(int id) {
   System.out.println("=====UserManagerImpl.delUser()===========");
}

public String findUser(int id) {
   System.out.println("=====UserManagerImpl.findUser()===========");
   return null;
}

public void saveUser(String username, String password) {
         System.out.println("=====UserManagerImpl.saveUser()===========");
}

public void updateUser(int id) {
   System.out.println("=====UserManagerImpl.updateUser()===========");
}
}


public void testAspect()
{
   BeanFactory factory = new ClassPathXmlApplicationContext("applicationContext.xml");
   IUserManager userManager = (IUserManager) factory.getBean("userManager");//生成的代理类proxy
   userManager.saveUser("cat", "123");
   userManager.delUser(1);
   userManager.updateUser(1); //没有调用切面advice,因为方法update与之不匹配。
}

执行结果：

=======CheckAspect.checkUser()===========
=====UserManagerImpl.saveUser()===========
=======CheckAspect.checkUser()===========
=====UserManagerImpl.delUser()===========
=====UserManagerImpl.updateUser()===========


六、Spring MVC
1   Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，可以选择是使用内置的 Spring Web 框架还是 Struts 这样的 Web 框架。通过策略接口，Spring 框架是高度可配置的，而且包含多种视图技术，例如 JavaServer Pages（JSP）技术、Velocity、Tiles、iText 和 POI。Spring MVC 框架并不知道使用的视图，所以不会强迫您只使用 JSP 技术。Spring MVC 分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。
　　Spring 的 Web MVC 框架是围绕 DispatcherServlet 设计的，它把请求分派给处理程序，同时带有可配置的处理程序映射、视图解析、本地语言、主题解析以及上载文件支持。默认的处理程序是非常简单的 Controller 接口，只有一个方法 ModelAndView handleRequest(request, response)。Spring 提供了一个控制器层次结构，可以派生子类。如果应用程序需要处理用户输入表单，那么可以继承 AbstractFormController。如果需要把多页输入处理到一个表单，那么可以继承 AbstractWizardFormController。
　
2 开发流程
@ web.xml配置

        <filter>   
        <filter-name>encodingFilter</filter-name>   
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>   
        <init-param>   
            <param-name>encoding</param-name>   
            <param-value>UTF-8</param-value>   
        </init-param>   
        <init-param>   
            <param-name>forceEncoding</param-name>   
            <param-value>true</param-value>   
        </init-param>   
    </filter>     
    <filter-mapping>   
        <filter-name>encodingFilter</filter-name>   
        <url-pattern>/*</url-pattern>   
    </filter-mapping>   

    <servlet>
　　<servlet-name>sampleBankingServlet</servlet-name>
　　<servlet-class>org.springframework.we.servlet.DispatcherServlet<servlet-class>
　　<load-on-startup>1<load-on-startup>
　　<servlet>
    <servlet-mapping>
　　<servlet-name> sampleBankingServlet<servlet-name>
　　<url-pattern>*.jsp</url-pattern>
　　</servlet-mapping> 

    <listener>   
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>   
    </listener>   
    
    <listener>   
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>   
    </listener>   

    <session-config>   
        <session-timeout>20</session-timeout>   
    </session-config>   

   我们需要在web-inf目录下添加/WEB-INF/applicationContext.xml和/WEB-INF/dispatcherServlet-servlet.xml。

   
@ 控制器实现Controller接口
package web;    
import java.util.HashMap;    
import java.util.List;    
import java.util.Map;    
import javax.servlet.http.HttpServletRequest;    
import javax.servlet.http.HttpServletResponse;    
import org.springframework.web.servlet.ModelAndView;    
import org.springframework.web.servlet.mvc.Controller;    
import service.AuthorService;    
import entity.Author;    
public class AuthorAction implements Controller 
{    
    private AuthorService authorService;    
    private String viewName;     
    public ModelAndView handleRequest(HttpServletRequest req,    
            HttpServletResponse res) throws Exception 
    {    
        Map<String,List<Author>> model=new HashMap<String,List<Author>>();    
        List<Author> authors=authorService.getAuthorsList();    
        model.put("model", authors);    
        return new ModelAndView(this.getViewName(), model); // 调用getViewPage获取要返回的页面    
   
    }    
   
    public String getViewName() {    
        return viewName;    
    }    
   
    public void setViewName(String viewName) {    
        this.viewName = viewName;    
    }    
   
    public AuthorService getAuthorService() {    
        return authorService;    
    }    
   
    public void setAuthorService(AuthorService authorService) {    
        this.authorService = authorService;    
    }    
}   


@ JSP页面展现数据
  <body>
    This is my JSP page2. <br>
     <c:forEach items="${model}" var="author">
     ${author.auId},${author.auLname }${author.phone }<br/>   
     </c:forEach>
  </body>



applicationContext.xml中配置：

<?xml version="1.0" encoding="UTF-8"?>   
<beans xmlns="http://www.springframework.org/schema/beans"   
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"   
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">   
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"   
        destroy-method="close">   
        <!-- Connection Info -->   
        <property name="driverClassName" value="${jdbc.driver}" />   
        <property name="url" value="${jdbc.url}" />   
        <property name="username" value="${jdbc.username}" />   
        <property name="password" value="${jdbc.password}"></property>   
   
        <!-- Connection Pooling Info -->   
        <property name="maxIdle" value="${dbcp.maxIdle}" />   
        <property name="maxActive" value="${dbcp.maxActive}" />   
        <property name="defaultAutoCommit" value="false" />   
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />   
        <property name="minEvictableIdleTimeMillis" value="3600000" />   
    </bean>   
   
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">   
        <property name="dataSource">   
            <ref bean="dataSource" />   
        </property>   
    </bean>   
    <bean id="authorDao" class="dao.AuthorDao">   
        <property name="jdbcTemplate">   
            <ref bean="jdbcTemplate" />   
        </property>   
    </bean>   
    <bean id="authorService" class="service.AuthorService">   
        <property name="authorDao">   
            <ref bean="authorDao" />   
        </property>   
    </bean>   
</beans>   


dispatcherServlet-servlet.xml中的配置：
<?xml version="1.0" encoding="UTF-8"?>   
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">   
<beans>   
   
    <bean id="localeResolver"    class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver">   </bean>   
   
    <!--配置控制器的映射-->   
    <bean id="urlMapping"   
        class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">   
        <property name="mappings">   
            <props>   
                <prop key="authorAction.do">authorAction</prop>   
            </props>   
        </property>   
    </bean>   
   
    <!--配置视图-->   
    <bean id="viewResolver"   
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">   
        <property name="prefix" value="/WEB-INF/content/" />   
        <property name="suffix" value=".jsp" />   
   
    </bean>   
   
    <!--指定控制器的实现类，并且配置其参数的值-->   
    <bean id="authorAction" class="web.AuthorAction">   
        <property name="viewName">   
            <value>authorsList</value>   
        </property>   
        <property name="authorService">   
            <ref bean="authorService" />   
        </property>   
    </bean>   
</beans>   


八、Spring事物的管理
1 使用Spring就不用手工控制事务
Hibernate中：
Transaction tx = session.beginTransaction();
tx.commit();

JDBC中：
con.setAutoCommit(false);
con.commit();
con.rollBack();

2 声明式事务
声明式事务(Programmatic transaction management)是Spring提供的对程序事务管理的方式之一。 　　Spring的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中申明。用在Spring配置文件中声明式的处理事务来代替代码式的处理事务。这样的好处是，事务管理不侵入开发的组件，具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可；在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便。 


3.Spring 框架中，涉及到事务管理的 API 大约有100个左右，其中最重要的有三个：

      TransactionDefinition(给定的事务规则 )
      PlatformTransactionManager(按照……来执行提交或者回滚操作 )
      TransactionStatus(表示一个运行着的事务的状态 )
    2.PlatformTransactionManager的实现类：
     DataSourceTransactionManager：适用于使用JDBC和iBatis进行数据持久化操作的情况。
　　 HibernateTransactionManager：适用于使用Hibernate进行数据持久化操作的情况。
　　 JpaTransactionManager：适用于使用JPA进行数据持久化操作的情况。
　　 另外还有JtaTransactionManager 、JdoTransactionManager、JmsTransactionManager等等

4.配置

<!-- 配置事务管理器 -->
<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
   <property name="sessionFactory">
       <ref bean="mySessionFactory"/>
   </property>
</bean>

<!--  配置事务传播特性 -->
<tx:advice id="TestAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="save*" propagation="REQUIRED"/>
      <tx:method name="del*" propagation="REQUIRED"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="add*" propagation="REQUIRED"/>
      <tx:method name="find*" propagation="REQUIRED"/>
      <tx:method name="get*" propagation="REQUIRED"/>
      <tx:method name="apply*" propagation="REQUIRED"/>
    </tx:attributes>
</tx:advice>

<!--  配置参与事务的类 -->
<aop:config>
<aop:pointcut id="allTestServiceMethod" expression="execution(* com.test.testAda.test.model.service.*.*(..))"/>
<aop:advisor pointcut-ref="allTestServiceMethod" advice-ref="TestAdvice" />
</aop:config>


5 事务的传播特性
PROPAGATION_REQUIRED--支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
PROPAGATION_SUPPORTS--支持当前事务，如果当前没有事务，就以非事务方式执行。
PROPAGATION_MANDATORY--支持当前事务，如果当前没有事务，就抛出异常。
PROPAGATION_REQUIRES_NEW--新建事务，如果当前存在事务，把当前事务挂起。
PROPAGATION_NOT_SUPPORTED--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
PROPAGATION_NEVER--以非事务方式执行，如果当前存在事务，则抛出异常。
PROPAGATION_NESTED--如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。

6、Spring事务的隔离级别 
ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别. 
     另外四个与JDBC的隔离级别相对应 

ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。 
     这种隔离级别会产生脏读，不可重复读和幻像读。 

ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据 

ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。
     它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。 

ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。 
     除了防止脏读，不可重复读外，还避免了幻像读。


7 数据库事务(Database Transaction) 
是指作为单个逻辑工作单元执行的一系列操作。事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID(原子性、一致性、隔离性和持久性)属性。 
1. 原子性(atomic)，事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行
2. 一致性(consistent)，事务在完成时，必须使所有的数据都保持一致状态。
3. 隔离性(insulation)，由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。
4. 持久性(Duration)，事务完成之后，它对于系统的影响是永久性的。















